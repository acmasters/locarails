#!/usr/bin/env ruby
#
#  Created on 2008-8-19.
#  Copyright (c) 2008. All rights reserved.
#  Fabio Akita - akitaonrails.com

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'ostruct'
require 'optparse'
require 'erb'

# configuracoes da sua hospedagem
config   = OpenStruct.new
mysqlcfg = OpenStruct.new

# defaults
config.force = false
config.mode = 'copy'

OptionParser.new do |opts|
  opts.banner = <<-STR
LocaRails - configurador de Capistrano para projetos Rails
especifico para hospedagens Linux da Locaweb

Uso: #{File.basename($0)} [caminho] [opcoes]
STR

  opts.on("-h", "--help", "Mostra esta tela de ajuda") do
    puts opts
    exit 0
  end
  
  opts.on("-m", "--mode=tipo", "modo de deployment (copy/git)", "Padrao: copy") do |mode|
    config.mode = mode
    unless "copy|git".include?(mode)
      puts "#{mode} nao existe. Escolha copy ou git como --mode."
      exit 0
    end
  end
  
  opts.on("-s", "--sshkey=caminho", "local da sua chave privada SSH", "Padrao: ~/.ssh/id_rsa") do |path|
    config.ssh_key_path = path
    unless File.exists?(path)
      puts "Chave inexistente no caminho #{path}."
      exit 0
    end
  end
  
  opts.on("-f", "--force", "Sobrescreve seu config/deploy.rb, caso exista.", "Cuidado: voce ira perder sua configuracao anterior") do
    config.force = true
  end
  
  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Por favor, especifique o diretorio do seu projeto Rails, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' nao existe. Tente novamente."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' nao eh um diretorio. Tente novamente."
elsif ARGV.length > 1
  abort "Argumentos demais; por favor especifique somente o diretorio da aplicacao Rails.."
end

def get_input(message)
  print "* #{message} > "
  gets.strip
end

# configuracoes locais da sua maquina
config.bin_path   = File.dirname(File.expand_path(__FILE__))
config.local_path = File.expand_path(ARGV.shift)
config.app_name   = config.local_path.split('/').last

if !config.force && File.exists?(File.join(config.local_path, 'config/deploy.rb'))
  abort "Voce ja tem capistrano configurado em config/deploy.rb. Configuracao abortada."
end

puts <<-STR
========================================================
Bem Vindos ao configurador de projetos da Locaweb.

Vamos configurar seu projeto Rails para melhor se
Adequar nas nossas hospedagens Linux compartilhada.

O comando locarails deve ser executado *dentro* do
diretorio do seu projeto, na sua maquina local.

Para tanto precisaremos de algumas informacoes:
========================================================

Estrategia de instalacao via: #{config.mode}

Garanta que a seguinte pasta contem sua aplicacao Rails:
  #{config.local_path}

STR

# configuracoes inseridas manualmente pelo usuario
config.app_name = get_input( "Nome da sua aplicacao" ) if config.app_name.nil? || config.app_name.empty?
config.dominio  = get_input "Dominio do seu site (ex. teste.tempsite.ws)"
config.usuario  = get_input "Seu usuario de hospedagem"
mysqlcfg.db     = get_input "Nome do seu banco mysql"
mysqlcfg.user   = get_input "Seu usuario de mysql"
mysqlcfg.pass   = get_input "Sua senha de mysql"
mysqlcfg.host   = get_input "Seu servidor mysql (ex. mysqlxxx.locaweb.com.br)"

# forca rodar capistrano
unless File.exists?("#{config.local_path}/Capfile")
  puts "- Executando Capistrano no seu projeto ..."
  begin
    `capify .`  
  rescue Exception => e
    puts <<-STR
ERRO: Voce provavelmente nao tem Capistrano instalado
Rode: sudo gem install capistrano

STR
  end
end

FileUtils.copy_file("#{config.bin_path}/../templates/locaweb_backup.rb", 
  "#{config.local_path}/config/locaweb_backup.rb")

File.open("#{config.local_path}/config/deploy.rb", 'w+') do |out| 
  erb = ERB.new(File.read("#{config.bin_path}/../templates/deploy.rb.erb"))
  buffer = erb.result(config.send(:binding))
  erb = ERB.new(File.read("#{config.bin_path}/../templates/deploy.common.rb.erb"))
  buffer << erb.result(config.send(:binding)) 
  out.puts buffer
end

File.open("#{config.local_path}/config/database.locaweb.yml", 'w+') do |out| 
  erb = ERB.new(File.read("#{config.bin_path}/../templates/database.locaweb.yml.erb"))
  out.puts erb.result(mysqlcfg.send(:binding))
end

puts <<-STR

# Parabens, voce terminou de configurar sua aplicacao Rails!
# Execute apenas uma vez 'cap deploy:setup' para configurar os
  diretorios remotamente na sua hospedagem.
# Em seguida execute 'cap deploy' para transportar sua aplicacao
  para a hospedagem. Sempre que quiser atualizar sua aplicacao
  no servidor apenas execute novamente 'cap deploy'
  
[finalizado!]
STR