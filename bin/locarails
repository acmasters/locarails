#!/usr/bin/env ruby
#
#  Created on 2008-8-19.
#  Copyright (c) 2008. All rights reserved.
#  Fabio Akita - akitaonrails.com

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'ostruct'
require 'optparse'
require 'erb'
require 'highline/import'

# configuracoes da sua hospedagem
class MyOpenStruct < OpenStruct
  def blank?(campo)
    send(campo).nil? || send(campo).empty?
  end  

  def input(campo, message, default_value = nil)
    unless blank?(campo)
      puts "* #{message} > #{message =~ /senha/ ? "********" : send(campo)}"
      return send(campo)
    end
    result = if message =~ /senha/
      ask("* #{message} > ") { |q| q.echo = "*" }  
    else
      ask("* #{message} > ")
    end
    send("#{campo}=", (default_value && result.empty?) ? default_value : result)
  end
end

config   = MyOpenStruct.new
mysqlcfg = MyOpenStruct.new

# defaults
config.force = false
config.mode = 'copy'

OptionParser.new do |opts|
  opts.banner = <<-STR
LocaRails - configurador de Capistrano para projetos Rails
especifico para hospedagens Linux da Locaweb

Uso: #{File.basename($0)} [caminho] [opcoes]
STR

  opts.on("--version", "Mostra versao atual do locarails") do
    require 'locarails'
    puts "Locarails v#{Locarails::VERSION::STRING}"
    exit 0
  end

  opts.on("-h", "--help", "Mostra esta tela de ajuda") do
    puts opts
    exit 0
  end
    
  opts.on("-m", "--mode=tipo", "modo de deployment (copy/git)", "Padrao: copy") do |mode|
    config.mode = mode
    unless "copy|git".include?(mode)
      puts "#{mode} nao existe. Escolha copy ou git como --mode."
      exit 0
    end
  end
  
  opts.on("-s", "--sshkey=caminho", "local da sua chave privada SSH", "Padrao: ~/.ssh/id_rsa") do |path|
    config.ssh_key_path = path
    unless File.exists?(path)
      puts "Chave inexistente no caminho #{path}."
      exit 0
    end
  end
  
  opts.on("-f", "--force", "Sobrescreve seu config/deploy.rb, caso exista.", "Cuidado: voce ira perder sua configuracao anterior") do
    config.force = true
  end
  
  opts.on("-u", "--usuario=login", "Usuario da hospedagem Linux") do |usuario|
    config.usuario = usuario
  end
  
  opts.on("-a", "--aplicacao=aplicacao", "Nome da sua aplicacao", "O mesmo do apontamento /public_html/aplicacao") do |aplicacao|
    config.app_name = aplicacao
  end
  
  opts.on("-d", "--dominio=URL", "Dominio do seu site", "ex. www.seu_dominio.com") do |dominio|
    config.dominio = dominio
  end
    
  opts.on("-q", "--banco=banco", "Nome do seu banco de dados") do |db|
    mysqlcfg.db = db
  end
  
  opts.on("-l", "--banco-usuario=login", "Login do seu banco de dados MySQL") do |dbuser|
    mysqlcfg.user = dbuser
  end
  
  opts.on("-p", "--banco-senha=senha", "Senha do seu banco de dados MySQL") do |dbpass|
    mysqlcfg.pass = dbpass
  end
  
  opts.on("-v", "--banco-servidor=servidor", "Servidor do seu banco de dados", "ex. mysql6666.locaweb.com.br") do |dbhost|
    mysqlcfg.host = dbhost
  end
  
  opts.on("-b", "--git-branch=branch", "Branch local do seu repositorio Git", "padrao: master") do |gitbranch|
    config.branch = gitbranch 
  end
  
  opts.on("-r", "--git-remote=remote", "Nome do repositorio remoto gravado no seu .git/config", "padrao: locaweb") do |gitname|
    config.remote_repo = gitname
  end
  
  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Por favor, especifique o diretorio do seu projeto Rails, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' nao existe. Tente novamente."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' nao eh um diretorio. Tente novamente."
end

# configuracoes locais da sua maquina
config.bin_path   = File.dirname(File.expand_path(__FILE__))
config.local_path = File.expand_path(ARGV.shift)
config.app_name   ||= config.local_path.split('/').last

if !config.force && File.exists?(File.join(config.local_path, 'config/deploy.rb'))
  abort "Voce ja tem capistrano configurado em config/deploy.rb. Configuracao abortada."
end

puts <<-STR
========================================================
Bem Vindos ao configurador de projetos da Locaweb.

Vamos configurar seu projeto Rails para melhor se
Adequar nas nossas hospedagens Linux compartilhada.

O comando locarails deve ser executado *dentro* do
diretorio do seu projeto, na sua maquina local.

Para tanto precisaremos de algumas informacoes:
========================================================

Estrategia de instalacao via: #{config.mode}

Garanta que a seguinte pasta contem sua aplicacao Rails:
  #{config.local_path}

STR

# configuracoes inseridas manualmente pelo usuario
config.input( :app_name, "Nome da sua aplicacao" )
config.input( :dominio,  "Dominio do seu site (ex. teste.tempsite.ws)" )
config.input( :usuario,  "Seu usuario de hospedagem" )
mysqlcfg.input( :db,   "Nome do seu banco mysql (enter para '#{config.usuario}')", config.usuario )
mysqlcfg.input( :user, "Seu usuario de mysql (enter para #{mysqlcfg.db})", mysqlcfg.db )
mysqlcfg.input( :pass, "Sua senha de mysql" ) 
mysqlcfg.input( :host, "Seu servidor mysql (ex. mysqlxxxx.locaweb.com.br)" )
mysqlcfg.host   = "#{mysqlcfg.host}.locaweb.com.br" unless mysqlcfg.host =~ /locaweb\.com\.br/ 
if config.mode == 'git'
  config.input( :branch, "Git branch (enter para 'master')", 'master' ) 
  config.input( :remote_repo, "Nome do repositorio remoto (enter para 'locaweb')", 'locaweb' ) 
  config.remote_git  = "#{config.usuario}@#{config.dominio}:~/repo/#{config.app_name}.git"
end

# forca rodar capistrano
unless File.exists?("#{config.local_path}/Capfile")
  puts "- Executando Capistrano no seu projeto ..."
  begin
    `capify .`  
  rescue Exception => e
    puts <<-STR
ERRO: Voce provavelmente nao tem Capistrano instalado
Rode: sudo gem install capistrano

STR
  end
end

if config.mode == 'git'
  FileUtils.copy_file("#{config.bin_path}/../templates/.gitignore", 
    "#{config.local_path}/.gitignore") unless File.exists?("#{config.local_path}/.gitignore")
end

FileUtils.copy_file("#{config.bin_path}/../templates/locaweb_backup.rb", 
  "#{config.local_path}/config/locaweb_backup.rb") unless File.exists?("#{config.local_path}/config/locaweb_backup.rb")

FileUtils.copy_file("#{config.bin_path}/../templates/ssh_helper.rb", 
  "#{config.local_path}/config/ssh_helper.rb") unless File.exists?("#{config.local_path}/config/ssh_helper.rb")

File.open("#{config.local_path}/config/deploy.rb", 'w') do |out| 
  erb = ERB.new(File.read("#{config.bin_path}/../templates/deploy.rb.erb"))
  buffer = erb.result(config.send(:binding))
  erb = ERB.new(File.read("#{config.bin_path}/../templates/deploy.common.rb.erb"))
  buffer << erb.result(config.send(:binding)) 
  out.puts buffer
end

File.open("#{config.local_path}/config/database.locaweb.yml", 'w') do |out| 
  erb = ERB.new(File.read("#{config.bin_path}/../templates/database.locaweb.yml.erb"))
  out.puts erb.result(mysqlcfg.send(:binding))
end

puts <<-STR

# Parabens, voce terminou de configurar sua aplicacao Rails!
# Execute apenas uma vez 'cap deploy:setup' para configurar os
  diretorios remotamente na sua hospedagem.
# Em seguida execute 'cap deploy' para transportar sua aplicacao
  para a hospedagem. Sempre que quiser atualizar sua aplicacao
  no servidor apenas execute novamente 'cap deploy'
  
[finalizado!]
STR